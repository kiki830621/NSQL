Phrase ID,Directive,Context,Implementation Code,Description,Parameters,Extension,Added Date,Added By,Status
SPC001,TRANSFORM,DATA,"# Transform data according to transformation rules
transformed_data <- $source_data %>%
  dplyr::mutate_at($columns, $transform_function) %>%
  dplyr::filter($filter_condition)

if ($save_result) {
  saveRDS(transformed_data, file.path($output_dir, paste0($output_name, '.rds')))
}

transformed_data","Transforms data according to specified rules","$source_data, $columns, $transform_function, $filter_condition, $save_result, $output_dir, $output_name",Specialized,2025-04-16,Claude,Active
SPC002,ANALYZE,RFM,"# Analyze RFM (Recency, Frequency, Monetary) metrics
rfm_data <- $transaction_data %>%
  dplyr::group_by($customer_id_col) %>%
  dplyr::summarize(
    recency = as.numeric(difftime(Sys.Date(), max($date_col), units = 'days')),
    frequency = n(),
    monetary = mean($amount_col)
  ) %>%
  dplyr::mutate(
    r_score = ntile(recency, 5),
    f_score = ntile(frequency, 5),
    m_score = ntile(monetary, 5),
    rfm_score = paste0(r_score, f_score, m_score)
  )

if ($save_result) {
  saveRDS(rfm_data, file.path($output_dir, paste0($output_name, '.rds')))
}

rfm_data","Analyzes RFM (Recency, Frequency, Monetary) metrics","$transaction_data, $customer_id_col, $date_col, $amount_col, $save_result, $output_dir, $output_name",Specialized,2025-04-16,Claude,Active
SPC003,EXPORT,DATA,"# Export data to various formats
data <- $source_data

switch($format,
  csv = write.csv(data, file.path($output_dir, paste0($output_name, '.csv')), row.names = FALSE),
  excel = writexl::write_xlsx(data, file.path($output_dir, paste0($output_name, '.xlsx'))),
  json = jsonlite::write_json(data, file.path($output_dir, paste0($output_name, '.json'))),
  parquet = arrow::write_parquet(data, file.path($output_dir, paste0($output_name, '.parquet'))),
  feather = arrow::write_feather(data, file.path($output_dir, paste0($output_name, '.feather')))
)","Exports data to various file formats","$source_data, $format, $output_dir, $output_name",Specialized,2025-04-16,Claude,Active
SPC004,VALIDATE,SCHEMA,"# Validate data schema against expected schema
actual_schema <- sapply($data, class)
expected_schema <- $expected_types

mismatches <- which(actual_schema != expected_schema)
if (length(mismatches) > 0) {
  warning(paste0(
    'Schema validation failed for columns: ',
    paste(names(mismatches), collapse = ', '),
    '. Expected: ',
    paste(paste(names(mismatches), expected_schema[mismatches], sep = ': '), collapse = ', '),
    '. Got: ',
    paste(paste(names(mismatches), actual_schema[mismatches], sep = ': '), collapse = ', ')
  ))
  FALSE
} else {
  TRUE
}","Validates data schema against expected types","$data, $expected_types",Specialized,2025-04-16,Claude,Active