Phrase ID,Directive,Context,Implementation Code,Description,Parameters,Extension,Added Date,Added By,Status
INI001,INITIALIZE,UPDATE_MODE,"source(file.path('update_scripts', 'global_scripts', '00_principles', 'sc_initialization_update_mode.R'))","Initialize system in update mode for script development",None,Core,2025-04-16,Claude,Active
INI002,INITIALIZE,APP_MODE,"source(file.path('update_scripts', 'global_scripts', '00_principles', 'sc_initialization_app_mode.R'))","Initialize system in app mode for Shiny application",None,Core,2025-04-16,Claude,Active
INI003,INITIALIZE,DATABASE ONLY,"source(file.path('update_scripts', 'global_scripts', '00_principles', 'sc_init_db_only.R'))","Initialize database connections only",None,Core,2025-04-16,Claude,Active
INI004,INITIALIZE_SYNTAX,,"# Initialize required libraries and dependencies
tryCatch({
  # Load required libraries
  suppressPackageStartupMessages({
    $libraries
  })
  
  # Set environment variables and parameters
  $environment_setup
  
  message('Initialization completed successfully')
}, error = function(e) {
  message('Error during initialization: ', e$message)
  return(FALSE)
})","Generic initialization syntax template with error handling","$libraries, $environment_setup",Core,2025-04-16,Claude,Active
DEI001,DEINITIALIZE_SYNTAX,,"# Clean up resources and connections
tryCatch({
  # Close open connections
  $close_connections
  
  # Reset environment variables
  $reset_environment
  
  message('Deinitialization completed successfully')
}, error = function(e) {
  message('Error during deinitialization: ', e$message)
  return(FALSE)
})","Generic deinitialization syntax template with error handling","$close_connections, $reset_environment",Core,2025-04-16,Claude,Active
DEI002,DEINITIALIZE,UPDATE_MODE,"# Set final status if not already set
if (!exists('final_status')) {
  if (exists('test_passed') && test_passed) {
    final_status <- TRUE
  } else {
    final_status <- FALSE
  }
}

# Use standard deinitialization script
source(file.path('update_scripts', 'global_scripts', '00_principles', 'sc_deinitialization_update_mode.R'))","Use standard deinitialization script for update mode",None,Core,2025-04-16,Claude,Active
DB001,CONNECT,APP_DATA,"app_data <- dbConnect_from_list('app_data')","Connect to the application database",None,Core,2025-04-16,Claude,Active
DB002,CONNECT,RAW_DATA,"raw_data <- dbConnect_from_list('raw_data')","Connect to the raw data database",None,Core,2025-04-16,Claude,Active
DB003,DISCONNECT,ALL,"if (exists('db_disconnect_all')) {
  db_disconnect_all()
} else {
  for (conn_obj in ls(pattern = '_(data|db|con)$', envir = .GlobalEnv)) {
    conn <- get(conn_obj, envir = .GlobalEnv)
    if (inherits(conn, 'DBIConnection')) {
      tryCatch({
        DBI::dbDisconnect(conn)
        message('Disconnected from ', conn_obj)
      }, error = function(e) {
        message('Failed to disconnect from ', conn_obj, ': ', e$message)
      })
    }
  }
}","Disconnect from all database connections",None,Core,2025-04-16,Claude,Active
IMP001,IMPLEMENT,TABLE CREATION,"create_table_query <- generate_create_table_query(
  con = $connection,
  or_replace = TRUE,
  target_table = '$table_name',
  source_table = NULL,
  column_defs = $column_definitions,
  primary_key = $primary_key,
  indexes = $indexes
)
dbExecute($connection, create_table_query)","Generate and execute a CREATE TABLE query","$connection, $table_name, $column_definitions, $primary_key, $indexes",Core,2025-04-16,Claude,Active
GIT001,SYNC GIT,,"# Source the update_global_scripts utility if not already loaded
if (!exists('update_global_scripts')) {
  source(file.path('update_scripts', 'global_scripts', 'fn_update_global_scripts.R'))
}

# Execute multi-repository synchronization
update_global_scripts(
  auto_commit = $auto_commit,
  verbose = $verbose,
  create_missing = $create_missing
)","Synchronize global_scripts across all company projects following R008","$commit_message, $auto_commit = TRUE, $verbose = TRUE, $create_missing = FALSE",Core,2025-04-16,Claude,Active
GIT002,SYNC GIT,SINGLE REPOSITORY,"# Source the git_sync utility if not already loaded
if (!exists('git_sync')) {
  source(file.path('update_scripts', 'global_scripts', '04_utils', 'git_sync.R'))
}

# Execute git sync operation
git_sync(
  commit_message = $commit_message,
  repo_path = $repository_path,
  remote = $remote,
  branch = $branch,
  skip_pull = $skip_pull
)","Synchronize a single git repository with commit, pull, and push (used when single_repository=TRUE)","$commit_message, $repository_path = 'update_scripts/global_scripts', $remote = 'origin', $branch = 'main', $skip_pull = FALSE",Core,2025-04-16,Claude,Active